import type { CreateDepartmentUserDTO } from "@/modules/application/dtos/departments/department-user.dto";
import { DepartmentUserEntity } from "@/modules/domain/entities/departments/department-user.entity";
import { UserEntity } from "@/modules/domain/entities/user.entities";
import type { DepartmentUserRepository } from "@/modules/domain/repository/departments/department-user.repository";

export class CreateDepartmentUserUseCase {
  constructor(private readonly dpmUserRepository: DepartmentUserRepository) {}

  async execute(dpmUserDTO: CreateDepartmentUserDTO): Promise<DepartmentUserEntity> {
    if (!dpmUserDTO.user) {
      throw new Error("User is required.");
    }

    const now = new Date();

    const userEntity = new UserEntity(
      '', // ID will likely be auto-generated by backend
      dpmUserDTO.user.username,
      dpmUserDTO.user.email,
      dpmUserDTO.roleIds,
      [],
      dpmUserDTO.permissionIds,
      now.toString(),
      now.toString(),
      "",
      dpmUserDTO.user.password,
      dpmUserDTO.user.tel,

    );
    // console.log('created:', dpmUserDTO);
    const dpmUser = DepartmentUserEntity.create(
      dpmUserDTO.position_id ?? '',
      userEntity,
      dpmUserDTO.signature_file ?? '',
      dpmUserDTO.departmentId,
      dpmUserDTO.permissionIds,
      dpmUserDTO.roleIds,
      dpmUserDTO.user_type
    );
    // console.log('created:', dpmUser);
    return await this.dpmUserRepository.create(dpmUser);
  }
}
